import { Component, OnInit } from '@angular/core';
import { ManagerService } from '../manager.service';
import { Elemento, FieldPopulated, Field, ServerResponse } from '../model';
import { ActivatedRoute, Router } from "@angular/router";

@Component({
  selector: 'app-vedi-lista',
  templateUrl: './vedi-lista.component.html',
  styleUrls: ['./vedi-lista.component.css']
})
export class VediListaComponent implements OnInit {
  retry: any = true;
  order: number[] = [];
  adding: boolean;
  searching: boolean;
  baseElement: Field[];
  names: String[] = [];
  elementi: Elemento[] = [];
  zooming: Map<number,boolean> = new Map<number,boolean>();
  editing: Map<number,boolean> = new Map<number,boolean>();
  enabled: boolean[] = [];
  private newElem: Elemento;
  private indexLista: number;
  private backUpElemento: Elemento;
  zoomingAll = false;
  filters: FieldPopulated[] = [];
  ordering = false;
  orderingBy = -1;
  orderDesc = false;
  constructor(private ms: ManagerService, private router: Router, private route: ActivatedRoute) { }

  public orderBy(order: number) {
    if (order === this.orderingBy)
      this.orderDesc = !this.orderDesc;
    else
      this.orderDesc = false;
    this.orderingBy = order;
    this.ordering = false;
  }

  cancel() {
    if (this.adding) {
      this.adding = false;
    }
    else { //searching?
      this.searching = false;
    }
    for (let entry of Array.from(this.editing.entries())) {
      this.editing.set(entry[0], false);
  }
    this.enabled.fill(false);
  }

  edit(i: number) {
    if (this.adding || this.searching)
      this.cancel();
      for (let entry of Array.from(this.editing.entries())) {
        this.editing.set(entry[0], false);
    }   
    this.backUpElemento = this.elementi.find(x=>x.id==i).copy();
    this.editing.set(i, true);
  }
  save(i: number) {
    this.editing.set(i, false);
    this.ms.saveElement(this.indexLista, this.elementi.find(x=>x.id==i)).subscribe((response:ServerResponse)=> {
    });
  }
  cancelEdit(i: number) {
    this.editing.set(i, false);
    for (let elem of this.elementi){
        if (elem.id==i){
          elem = this.backUpElemento.copy();
          break;
        }
    }
    
  }
  remove(i: number) {
    if (confirm('Sei sicuro di voler cancellare l\'elemento?')) {
      this.ms.removeElement(i, this.indexLista).subscribe((response:ServerResponse)=> {
        if (response.esito === 0) {
          let j=0;
          for (j=0; j<this.elementi.length; j++){
            if (this.elementi[j].id===i)
              break;
          }
          this.elementi.splice(j,1);
        }
        else if (response.esito === 1) {
          if (response.messaggio === 'SESSIONEXPIRED') {
            this.ms.AlertEmitter.emit({ msg: 'Sessione scaduta, effettua di nuovo il login', color: 'red' });
            this.router.navigate(['/']);
          }
        }
      })
    }
  }

  ngOnInit() {
    this.indexLista = this.route.snapshot.params['idLista'];
    if (this.ms.liste.find(x => x.id == this.indexLista)) {
      this.ms.getElements(this.indexLista, 0).subscribe((response:ServerResponse)=> {
        if (response.esito === 0 && response.data) {
          let fieldNumber = this.baseElement.length;
          for (let i = 0; i < fieldNumber; i++) {
            this.names.push('');
            this.order.push(-1);
          };
          this.baseElement.forEach(data=> {
            this.enabled.push(false);
            this.names[data.id] = data.name;
            this.order[data.id] = data.order;
          })
          response.data.forEach(element => {
            let el = new Elemento(element.elId);
            el.fields = [];
            for (let i = 0; i < element.fields.length; i++) {
              if (element.fields[i] != null)
                el.fields[this.order[element.fields[i].idField]] = new FieldPopulated(element.fields[i].type,
                  element.fields[i].idField, element.fields[i].order, element.fields[i].value);
            };
            this.elementi.push(el);
            this.zooming.set(el.id, false);
            this.editing.set(el.id, false);            
          });
        }
        else if (response.esito === 1) {
          if (response.messaggio === 'SESSIONEXPIRED') {
            this.ms.AlertEmitter.emit({ msg: 'Sessione scaduta, effettua di nuovo il login', color: 'red' });
            this.router.navigate(['/']);
          }
        }
      });
      this.baseElement = this.ms.liste.find(x => x.id == this.indexLista).fields;
    }
    else {
      this.ms.tryToRecoverSession().then((data:any)=> {
        if (!data)
          this.router.navigate(['/']);
        else if (this.retry) {
          this.retry = false;
          this.ngOnInit();
        }
      });
    }
  }

  getBaseElementById(i:number){
    return this.baseElement.find(x=>x.id==i);
  }

  saveElement() {
    this.adding = false;
    let addedElement = this.newElem.copy();
    addedElement.fields.forEach(field => {
      if (field.type === 4 && field.value !== '')
        field.value = this.getDateFormat(field.value);
    });
    this.ms.saveElement(this.indexLista, addedElement).subscribe((response:ServerResponse)=> {
      if (response.esito === 0) {
        this.newElem.id = response.data.elementId;
        this.elementi.unshift(this.newElem);
        this.newElem = new Elemento(-1);
      }
      else if (response.esito === 1) {
        if (response.messaggio === 'SESSIONEXPIRED') {
          this.ms.AlertEmitter.emit({ msg: 'Sessione scaduta, effettua di nuovo il login', color: 'red' });
          this.router.navigate(['/']);
        }
      }
    });
  }
  filter() {
    let addedElement = this.newElem.copy();
    let newFilters = [];
    addedElement.fields.forEach(field => {
      if (this.enabled[field.order])
        newFilters.push(new FieldPopulated(field.type, field.id, 0, field.value));
    });
    this.filters = newFilters;
  }

  addClicked(index?: number) {

    this.cancel();
    if (index === undefined) {
      this.newElem = new Elemento();
      this.baseElement.forEach(elem => {
        if (elem.type == 2)
          this.newElem.fields.push(new FieldPopulated(elem.type, elem.id, elem.order, false));
        else
          this.newElem.fields.push(new FieldPopulated(elem.type, elem.id, elem.order));
      });
    }
    else {
      this.newElem = this.elementi.find(el=>el.id==index).copy();
      this.newElem.id = -1;
      this.baseElement.forEach(elem => {
        if (this.newElem.fields.find(field => field.id === elem.id) === undefined) {
          if (elem.type == 2)
            this.newElem.fields.push(new FieldPopulated(elem.type, elem.id, elem.order, false));
          else
            this.newElem.fields.push(new FieldPopulated(elem.type, elem.id, elem.order));
        } else{
          this.enabled[elem.order] = true;
        }
      });
      window.scrollTo(0, 0);
    }

    this.adding = true;
  }

  search() {
    this.cancel();
    this.newElem = new Elemento();
    this.baseElement.forEach(elem => {
      if (elem.type == 2)
        this.newElem.fields.push(new FieldPopulated(elem.type, elem.id, elem.order, false));
      else
        this.newElem.fields.push(new FieldPopulated(elem.type, elem.id, elem.order));
    });
    this.searching = true;
  }

  zoomAll() {
    for (let entry of Array.from(this.zooming.entries())) {
      this.zooming.set(entry[0], !this.zoomingAll);
  }    
    this.zoomingAll = !this.zoomingAll;
  }

  getDateFormat(value: string): string {
    let date = new Date(value);
    let ret = '';
    ret = date.getFullYear() + '/' + (date.getMonth() + 1) + '/' + date.getDate() + ' ' + date.getHours() + ':' + date.getMinutes();
    return ret;
  }

}
